@(maxItem: Int)

package zsg.macros.case_class_test

import zsg.macros.single.PropertyApply
import scala.collection.compat._

import zio._
import zio.console._
import zio.test._
import zio.test.Assertion._
import zio.test.environment._

@CaseClassMember(i: Int) = { i@{i}: @if(i % 6 == 0) { String } @if(i % 6 == 1) { Long } @if(i % 6 == 2) { Int } @if(i % 6 == 3) { Int } @if(i % 6 == 4) { Long } @if(i % 6 == 5) { Long = Long.MaxValue } }
@CaseClassDefaultValue(i: Int) = { @if(i % 6 == 5) { DefaultValue(value = Option(LongProperty(self.i@{i})), fieldIndex = @{i}) } else { DefaultValue(value = Option.empty, fieldIndex = @i) } }
@CaseClassFieldValue(i: Int) = { FieldModel(value = @if(i % 6 == 0) { StringProperty(self.i@{i}) } @if(i % 6 == 1) { LongProperty(self.i@{i}) } @if(i % 6 == 2) { IntProperty(self.i@{i}) } @if(i % 6 == 3) { IntProperty(self.i@{i}) } @if(i % 6 == 4) { LongProperty(self.i@{i}) } @if(i % 6 == 5) { LongProperty(self.i@{i}) }, fieldIndex = @{i}, fieldName = "i@{i}", typeName = @if(i % 6 == 0) { "String" } @if(i % 6 == 1) { "Long" } @if(i % 6 == 2) { "Int" } @if(i % 6 == 3) { "Int" } @if(i % 6 == 4) { "Long" } @if(i % 6 == 5) { "Long" }) }
@CaseClassParmeter(i: Int) = { @if(i % 6 == 0) { @if(i > 1) { , } i@{i} = "i1" } @if(i % 6 == 1) { @if(i > 1) { , } i@{i} = 225523422542L } @if(i % 6 == 2) { @if(i > 1) { , } i@{i} = 88 } @if(i % 6 == 3) { @if(i > 1) { , } i@{i} = 82 } @if(i % 6 == 4) { @if(i > 1) { , } i@{i} = 24564564L } }

object CaseClassTest@{maxItem} extends DefaultRunnableSpec {

    case class Foo@{maxItem}(@for(i <- 1 to maxItem) { @if(i > 1) { , } @CaseClassMember(i = i) }) {
        self =>
        def fieldNames: List[String] = List(@for(ii <- 1 to maxItem) { @if(ii > 1) { , } "i@{ii}" })
        def defaultValues: List[DefaultValue] = List(@for(i <- 1 to maxItem) { @if(i > 1) { , } @CaseClassDefaultValue(i = i) })
        def fieldInfo: List[FieldModel] =
            List(@for(i <- 1 to maxItem) { @if(i > 1) { , } @CaseClassFieldValue(i = i) })
        def reverseFieldInfo: List[FieldModel] =
            List(@for(i <- maxItem to 1 by - 1) { @CaseClassFieldValue(i = i) @if(i > 1) { , } })
    }

    val fooValue@{maxItem} = Foo@{maxItem}(@for(i <- 1 to maxItem) {  @CaseClassParmeter(i = i) })

    val fooEncoder@{maxItem}: ModelToString[Foo@{maxItem}] = ModelToString.encoder
    val reverseFooEncoder@{maxItem}: ModelToString[Foo@{maxItem}] = ModelToString.reverseEncoder
    val fooDecoder@{maxItem}: ModelFromString[Foo@{maxItem}] = ModelFromString.decoder
    val reverseFooDecoder@{maxItem}: ModelFromString[Foo@{maxItem}] = ModelFromString.reverseDecoder

    override def spec = suite("A case class by @{maxItem} length")(
        zio.test.test("should generic to a encoder") {
            val str1 = fooEncoder@{maxItem}.mToString(fooValue@{maxItem})
            assert(str1)(equalTo(fooValue@{maxItem}.fieldInfo))
        },
        zio.test.test("should generic to a reverse encoder") {
            val str2 = reverseFooEncoder@{maxItem}.mToString(fooValue@{maxItem})
            assert(str2)(equalTo(fooValue@{maxItem}.reverseFieldInfo))
        },
        zio.test.test("should generic to it's default value") {
            val str2 = fooEncoder@{maxItem}.defaultValues
            assert(str2)(equalTo(fooValue@{maxItem}.defaultValues))
        },
        zio.test.test("should generic to it's name list") {
            val name1 = fooEncoder@{maxItem}.labelledNames
            assert(name1)(equalTo(fooValue@{maxItem}.fieldNames))
        },
        zio.test.test("should generic to it's reverse name list") {
            val name1 = reverseFooEncoder@{maxItem}.labelledNames
            assert(name1)(equalTo(fooValue@{maxItem}.fieldNames.reverse))
        },
        zio.test.test("should generic to a decoder") {
            val (_, model1) = fooDecoder@{maxItem}.getData(fooValue@{maxItem}.fieldInfo)
            assert(model1)(equalTo(fooValue@{maxItem}))
        },
        zio.test.test("should generic to a reverse decoder") {
            val (_, model2) = reverseFooDecoder@{maxItem}.getData(fooValue@{maxItem}.reverseFieldInfo)
            assert(model2)(equalTo(fooValue@{maxItem}))
        }
    )
    @* describe("A case class by @{maxItem} length") {
        it("should generic to a encoder") {
            val str1 = fooEncoder@{maxItem}.mToString(fooValue@{maxItem})
            str1 shouldBe fooValue@{maxItem}.fieldInfo
        }
        it("should generic to a reverse encoder") {
            val str2 = reverseFooEncoder@{maxItem}.mToString(fooValue@{maxItem})
            str2 shouldBe fooValue@{maxItem}.reverseFieldInfo
        }
        it("should generic to it's default value") {
            val str2 = fooEncoder@{maxItem}.defaultValues
            str2 shouldBe fooValue@{maxItem}.defaultValues
        }
        it("should generic to it's name list") {
            val name1 = fooEncoder@{maxItem}.labelledNames
            name1 shouldBe fooValue@{maxItem}.fieldNames
        }
        it("should generic to it's reverse name list") {
            val name1 = reverseFooEncoder@{maxItem}.labelledNames
            name1 shouldBe fooValue@{maxItem}.fieldNames.reverse
        }
        it("should generic to a decoder") {
            val (_, model1) = fooDecoder@{maxItem}.getData(fooValue@{maxItem}.fieldInfo)
            model1 shouldBe fooValue@{maxItem}
        }
        it("should generic to a reverse decoder") {
            val (_, model2) = reverseFooDecoder@{maxItem}.getData(fooValue@{maxItem}.reverseFieldInfo)
            model2 shouldBe fooValue@{maxItem}
        }
    } *@

}