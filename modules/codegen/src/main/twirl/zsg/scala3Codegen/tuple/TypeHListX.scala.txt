@(maxItem: Int)

package zsg

package inner {
    object innerTypeAlias {
        import zsg._
        type TakeTail1[T <: TypeHList] <: TypeHList = T match {
            case TypePositive[head, tail] => tail
        }
        @for(i <- 2 to maxItem - 1) {
            type TakeTail@{i}[T <: TypeHList] <: TypeHList = TakeTail@{i - 1}[T] match {
                case TypePositive[head, tail] => tail
            }
        }
    }
}

type TakeTail1[T <: TypeHList] <: TypeHList = T match {
    case TypePositive[head, tail] => tail
}
@for(i <- 2 to maxItem) {
    type TakeHead@{i}[T <: TypeHList] = inner.innerTypeAlias.TakeTail@{i - 1}[T] match {
        case TypePositive[head, tail] => head
    }
}
@for(i <- 2 to maxItem) {
    @zsg.codegen.ZsgCoreCodeGeneration.scala3TypeHListXGen(i)
}